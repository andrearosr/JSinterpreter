using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace syntaxanalyzer
{
    class Analyzer
    {
        private enum Status
        {
            q0,
            q1,
            q2,
            q3,
            q4,
            q5,
            q6,
            q7,
            q8,
            q9,
            x
        };

        private Dictionary<string, string> codes = new Dictionary<string, string>
        {
            {"A", "Declaración de variable"},

            {"BC", "Asignación de variable a variable"},
            {"BD", "Asignación de variable a constante" },

            {"ABC", "Declaración de variable con asignación a variable"},
            {"ABD", "Declaración de variable con asignación a constante"},

            {@"^AB([CD]E[CD])$", "Declaración de variable con asignación a suma de valores"},
            {@"^AB([CD]F[CD])$", "Declaración de variable con asignación a resta de valores"},
            {@"^AB([CD]G[CD])$", "Declaración de variable con asignación a producto de valores"},
            {@"^AB([CD]H[CD])$", "Declaración de variable con asignación a división de valores"},

            {@"^B([CD]E[CD])$", "Asignación de variable a suma de valores"},
            {@"^B([CD]F[CD])$", "Asignación de variable a resta de valores"},
            {@"^B([CD]G[CD])$", "Asignación de variable a producto de valores"},
            {@"^B([CD]H[CD])$", "Asignación de variable a división de valores"},
        };

        private Dictionary<string, string> patterns = new Dictionary<string, string>
        {
            {"float",  @"^[0-9]*\.[0-9]+$"},
            {"integer", @"^[0-9]+$"},
            {"string", @"^(("").*("")|(').*('))$"},
            {"declaration", @"^var$"},
            {"reservedWord", @"^(return|function|this|new|if|else)$"},
            {"assignment", @"^=$"},
            {"sum", @"^\+$"},
            {"substraction", @"^\-$"},
            {"product", @"^\*$"},
            {"division", @"^\/$"},
            {"operator", @"^(\?|\%|\!|\&|\||\>|\<|\={2,3})$"},
            {"terminator", @"^;$"},
            {"identifier", @"^[_a-zA-Z][a-zA-Z0-9]*$"},
            {"specialChar", @"^(\""|\{|\}|\.|\,)$"},
        };

        public Analyzer()
        { }

        private string compare(string lexeme)
        {
            Console.WriteLine("lex: " + lexeme);
            string match = "none";

            foreach (KeyValuePair<string, string> pattern in patterns)
            {

                if (Regex.Match(lexeme, pattern.Value).Success && match.Equals("none"))
                {
                    match = pattern.Key;
                }
            }

            return match;
        }

        private List<KeyValuePair<string, string>> tokenize(string input)
        {
            List<KeyValuePair<string, string>> st = new List<KeyValuePair<string, string>> { };
            input = input.Trim();

            string[] words = Regex.Split(input, @"\s|(?=[;\=\+\-\*\/\,])(?<!\s)|(?<=[\=\+\-\*\/\,](?!\=))|(?<=;(?!$))");

            foreach (string lexeme in words)
            {
                string token = "";

                token = compare(lexeme);
                KeyValuePair<string, string> element = new KeyValuePair<string, string>(token, lexeme);

                st.Add(element);

            }

            return st;
        }

        public List<KeyValuePair<string, string>> analyze(string input)
        {
            List<KeyValuePair<string, string>> inst = new List<KeyValuePair<string, string>>();
            List<KeyValuePair<string, string>> symbolTable = new List<KeyValuePair<string, string>>();

            string[] instructions = input.Trim().Split(new char[]{';'}, StringSplitOptions.RemoveEmptyEntries);
            string insText = "";
            int line = 0;
            string valueCode = "";
            string value = "";
            Console.WriteLine("length: " + instructions.Length);

            foreach (string instruction in instructions)
            {
                Status status = Status.q0;
                bool error = false;
                line++;
                inst = tokenize(instruction);
                Console.WriteLine("instruction: " + inst.Count);
                insText = instruction;

                for (int i = 0; i < inst.Count; i++) {
                    switch (status)
                    {
                        case Status.q0:
                            switch (inst[i].Key)
                            {
                                case "declaration":
                                    status = Status.q1;
                                    break;
                                case "identifier":
                                    status = Status.q5;
                                    valueCode = "B";
                                    break;
                                default: status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q1:
                            switch (inst[i].Key)
                            {
                                case "identifier":
                                    status = Status.q2;
                                    valueCode = "A";
                                    break;
                                default: status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q2:
                            switch (inst[i].Key)
                            {
                                case "assignment":
                                    status = Status.q3;
                                    valueCode += "B";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q3:
                            switch (inst[i].Key)
                            {
                                case "identifier":
                                    status = Status.q4;
                                    valueCode += "C";
                                    break;
                                case "float":
                                case "integer":
                                case "string":
                                    status = Status.q4;
                                    valueCode += "D";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q4:
                            switch (inst[i].Key)
                            {
                                case "sum":
                                    status = Status.q8;
                                    valueCode += "E";
                                    break;
                                case "substraction":
                                    status = Status.q8;
                                    valueCode += "F";
                                    break;
                                case "product":
                                    status = Status.q8;
                                    valueCode += "G";
                                    break;
                                case "division":
                                    status = Status.q8;
                                    valueCode += "H";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q5:
                            switch (inst[i].Key)
                            {
                                case "assignment":
                                    status = Status.q6;
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q6:

                            Console.WriteLine("token: " + inst[i].Key);
                            switch (inst[i].Key)
                            {
                                case "identifier":
                                    status = Status.q7;
                                    valueCode += "C";
                                    break;
                                case "float":
                                case "integer":
                                case "string":
                                    status = Status.q7;
                                    valueCode += "D";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q7:
                            switch (inst[i].Key)
                            {
                                case "sum":
                                    status = Status.q8;
                                    valueCode += "E";
                                    break;
                                case "substraction":
                                    status = Status.q8;
                                    valueCode += "F";
                                    break;
                                case "product":
                                    status = Status.q8;
                                    valueCode += "G";
                                    break;
                                case "division":
                                    status = Status.q8;
                                    valueCode += "H";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q8:
                            switch (inst[i].Key)
                            {
                                case "identifier":
                                    status = Status.q9;
                                    valueCode += "C";
                                    break;
                                case "float":
                                case "integer":
                                case "string":
                                    status = Status.q9;
                                    valueCode += "D";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.q9:
                            switch (inst[i].Key)
                            {
                                case "sum":
                                    status = Status.q8;
                                    valueCode += "E";
                                    break;
                                case "substraction":
                                    status = Status.q8;
                                    valueCode += "F";
                                    break;
                                case "product":
                                    status = Status.q8;
                                    valueCode += "G";
                                    break;
                                case "division":
                                    status = Status.q8;
                                    valueCode += "H";
                                    break;
                                default:
                                    status = Status.x;
                                    break;
                            }
                            break;

                        case Status.x: break;
                    }
                }
                
                if(status != Status.q2 && status != Status.q4 && status != Status.q7 && status != Status.q9)
                {
                    insText = "error";
                    valueCode = line.ToString();
                    error = true;
                }

                value = getCodeDescription(valueCode);

                KeyValuePair<string, string> entry = new KeyValuePair<string, string>(
                    insText, value);
                symbolTable.Add(entry);

                if (error) break;

            }

            return symbolTable;
        }

        string getCodeDescription(string instCode)
        {
            string description = "";

            foreach (KeyValuePair<string, string> code in codes)
            {

                if (Regex.Match(instCode, code.Key).Success)
                {
                    description = code.Value;
                }
            }

            return description;
        }
    }
}
